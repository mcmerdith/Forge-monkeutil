package net.mcmerdith.monkeutil.client.render.gui;

import com.mojang.blaze3d.matrix.MatrixStack;
import net.mcmerdith.monkeutil.Main;
import net.mcmerdith.monkeutil.client.util.ClientUtils;
import net.mcmerdith.monkeutil.core.enums.Keys;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.client.gui.widget.Widget;
import net.minecraft.util.ColorHelper;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;

import javax.annotation.Nonnull;
import java.util.ArrayList;
import java.util.List;

/**
 * Base class for creating GUIs
 * Not accessible on a server jar
 *
 * @author mcmerdith
 * @version 1.0
 * @since 1.0
 */
@OnlyIn(Dist.CLIENT)
public abstract class BaseScreen extends Screen {
    /**
     * The ResourceLocation that the background of the GUI is stored at
     */
    protected final ResourceLocation background;
    /**
     * Whether opening the GUI should pause the game in Singleplayer
     */
    private final boolean pausesGame;
    /**
     * The width of the GUI
     */
    protected final int WIDTH;
    /**
     * The height of the GUI
     */
    protected final int HEIGHT;
    /**
     * All components that should be rendered
     * <p>TextFields, etc. should be added here, not rendered by the implementing class</p>
     */
    protected List<Widget> renderComponents = new ArrayList<>();
    /**
     * An integer representing the default, medium gray color
     */
    protected final int defaultColor = ColorHelper.PackedColor.packColor(255, 140, 140, 140);

    /**
     * Create a GUI
     * <p>Background is a ResourceLocation {@link #getGUIResource(String)}</p>
     * <p>The readable name of the GUI is generated by {@link ClientUtils#screenTranslation(String)} with the parameter being [name]</p>
     *
     * @param name       The ResourceLocation identifier of this GUIs name
     * @param WIDTH      The width of the GUI (in pixels)
     * @param HEIGHT     The height of the GUI (in pixels)
     * @param pausesGame If opening the GUI should pause the game
     * @apiNote Since [name] is used in a ResourceLocation, it should conform to ResourceLocation specs
     */
    protected BaseScreen(String name, int WIDTH, int HEIGHT, boolean pausesGame) {
        super(ClientUtils.screenTranslation(name));
        this.background = getGUIResource(name);
        this.WIDTH = WIDTH;
        this.HEIGHT = HEIGHT;
        this.pausesGame = pausesGame;
    }

    protected BaseScreen(String titleComponent, int WIDTH, int HEIGHT) {
        this(titleComponent, WIDTH, HEIGHT, false);
    }

    /**
     * Get a ResourceLocation for the GUI background
     * pointing to 'textures/gui/[name].png'
     *
     * @param name The name of the GUI
     * @return The ResourceLocation
     */
    protected ResourceLocation getGUIResource(String name) {
        return new ResourceLocation(Keys.MODID, "textures/gui/" + name + ".png");
    }

    /**
     * Open a GUI on a client
     *
     * @param gui The GUI to open
     */
    public static void open(Screen gui) {
        Minecraft.getInstance().displayGuiScreen(gui);
    }

    /**
     * Close any open GUI
     */
    public static void close() {
        open(null);
    }

    /**
     * Overrides the default Minecraft implementation
     * <p>Allow GUIs to NOT pause the game on open in Singleplayer</p>
     *
     * @return If the game should pause when opened
     */
    @Override
    public final boolean isPauseScreen() {
        return this.pausesGame;
    }

    /**
     * Helper method for {@link Screen#init()}
     * <p>Forward this call to {@link #initialize(int, int)}
     * with the GUI start coordinates</p>
     */
    @Override
    protected final void init() {
        this.initialize(getGUIStartX(), getGUIStartY());
    }

    /**
     * Called when the GUI is initialized
     * <p>You should create all your components (Buttons, TextFields, etc.) here</p>
     * <p>DO NOT attempt to render elements here. See {@link #render(MatrixStack, int, int, float)}</p>
     *
     * @param xStart The x coordinate of the GUIs top-left corner
     * @param yStart The y coordinate of the GUIs top-left corner
     */
    abstract protected void initialize(int xStart, int yStart);

    /**
     * Render your custom elements here
     * <p>Any widgets added to {@link #renderComponents} will be rendered automatically</p>
     * <p>A title will be automatically generated at (10, 10)</p>
     * <p>Elements should be placed according to this "grid" scheme. See {@link #getYForRow(int)}</p>
     */
    @Override
    public void render(@Nonnull MatrixStack stack, int x, int y, float ticks) {
        int startX = getGUIStartX();
        int startY = getGUIStartY();

        // Bind the texture
        if (this.minecraft == null) {
            Main.LOGGER.error("[BaseScreen] Could not bind GUI texture. This should NEVER happen");
        } else {
            this.minecraft.textureManager.bindTexture(background);
        }

        // I have no idea what this does, but you have to call it for the GUI to render
        this.blit(stack, startX, startY, 0, 0, WIDTH, HEIGHT);

        // Add the title
        drawString(stack, this.font, this.title, startX + 10, startY + 10, defaultColor);

        // Render all the components
        renderComponents.forEach(component -> component.render(stack, x, y, ticks));

        // Forward the event to the default Screen renderer
        super.render(stack, x, y, ticks);
    }

    /**
     * Get the X coordinate of the top-left GUI corner
     *
     * @return The X coordinate
     */
    protected final int getGUIStartX() {
        return (this.width - WIDTH) / 2;
    }

    /**
     * Get the Y coordinate of the top-left GUI corner
     *
     * @return The Y coordinate
     */
    protected final int getGUIStartY() {
        return (this.height - HEIGHT) / 2;
    }

    /**
     * Get the Y coordinate of the GUI row
     *
     * @param row The row to get the coordinate of (starting at 0)
     * @return The Y coordinate ({@link #getGUIStartY()} + 25 + (row * 15))
     */
    protected final int getYForRow(int row) {
        return getGUIStartY() + 25 + (row * 15);
    }

    /**
     * Get the X coordinate that would make an element of this width align with the right edge of the screen
     * <p>This will place 10px of padding to the right of the element</p>
     *
     * @param width The width of the element
     * @return The X coordinate
     */
    protected final int getXRightAlign(int width) {
        return getGUIStartX() + WIDTH - width - 10;
    }
}
